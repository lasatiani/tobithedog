
// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@use '@angular/material' as mat;
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
// TODO(v15): As of v15 mat.legacy-core no longer includes default typography styles.
//  The following line adds:
//    1. Default typography styles for all components
//    2. Styles for typography hierarchy classes (e.g. .mat-headline-1)
//  If you specify typography styles for the components you use elsewhere, you should delete this line.
//  If you don't need the default component typographies but still want the hierarchy styles,
//  you can delete this line and instead use:
//    `@include mat.legacy-typography-hierarchy(mat.define-legacy-typography-config());`
@include mat.all-legacy-component-typographies();
@include mat.legacy-core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$angular-basic-primary: mat.define-palette(mat.$indigo-palette);
$angular-basic-accent: mat.define-palette(mat.$pink-palette, A200, A100, A400);

// The warn palette is optional (defaults to red).
$angular-basic-warn: mat.define-palette(mat.$red-palette);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$angular-basic-theme: mat.define-light-theme((
  color: (
    primary: $angular-basic-primary,
    accent: $angular-basic-accent,
    warn: $angular-basic-warn,
  )
));

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include mat.all-legacy-component-themes($angular-basic-theme);

// Define a light theme
$light-primary: mat.define-palette(mat.$indigo-palette);
$light-accent: mat.define-palette(mat.$pink-palette);
$light-theme: mat.define-light-theme(
  (
    color: (
      primary: $light-primary,
      accent: $light-accent,
    ),
  )
);

// Define a dark theme
$dark-primary: mat.define-palette(mat.$pink-palette);
$dark-accent: mat.define-palette(mat.$blue-gray-palette);
$dark-theme: mat.define-dark-theme(
  (
    color: (
      primary: $dark-primary,
      accent: $dark-accent,
    ),
  )
);

.color-scheme-dark {
  @include mat.legacy-core-color($dark-theme);
  @include mat.legacy-button-color($dark-theme);
  @include mat.icon-color($dark-theme);
  @include mat.legacy-list-color($dark-theme);
  @include mat.sidenav-color($dark-theme);
  @include mat.toolbar-color($dark-theme);
  @include mat.legacy-card-color($dark-theme);
  // Example how you can easy add own custom styles
  .card-wrapper {
    color: #d0d0d0;
  }
}

.color-scheme-light {
  @include mat.legacy-core-color($light-theme);
  @include mat.legacy-button-color($light-theme);
  @include mat.icon-color($light-theme);
  @include mat.legacy-list-color($light-theme);
  @include mat.sidenav-color($light-theme);
  @include mat.toolbar-color($light-theme);
  @include mat.legacy-card-color($light-theme);
  // Example how you can easy add own custom styles
  .card-wrapper {
    color: #2d2d2d;
  }
}


